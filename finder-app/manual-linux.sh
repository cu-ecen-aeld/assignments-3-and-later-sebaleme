#!/bin/bash
# Script outline to install and build kernel.
# Author: Siddhant Jajoo.

set -e
set -u

echo "========== Initialize global variables =========="
OUTDIR=/tmp/aeld
KERNEL_REPO=git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
KERNEL_VERSION=v5.15.163
BUSYBOX_VERSION=1_33_1
FINDER_APP_DIR=$(realpath $(dirname $0))
ARCH=arm64
CROSS_COMPILE=aarch64-none-linux-gnu-

if [ $# -lt 1 ]
then
	echo "Using default directory ${OUTDIR} for output"
else
	OUTDIR=$1
	echo "Using passed directory ${OUTDIR} for output"
fi
KERNEL_REPO=http://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
KERNEL_VERSION=v5.1.10
BUSYBOX_VERSION=1_33_1
FINDER_APP_DIR=$(realpath $(dirname $0))
ARCH=arm64
CROSS_COMPILE=aarch64-none-linux-gnu-
XCOMPILER_PATH=${OUTDIR}/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu
REPO=${OUTDIR}/assignments-3-and-later-sebaleme

mkdir -p ${OUTDIR}

cd "$OUTDIR"
echo "========== Download and build kernel =========="
# Could not clone repo from professional desktop due to proxy, so using tar file with 5.1.10
# https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/refs/tags
if [ ! -d "${OUTDIR}/linux-5.1.10" ]; then
    #Clone only if the repository does not exist.
	echo "CLONING GIT LINUX STABLE VERSION ${KERNEL_VERSION} IN ${OUTDIR}"
	# git clone ${KERNEL_REPO} --depth 1 --single-branch --branch ${KERNEL_VERSION}
    wget https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/snapshot/linux-5.1.10.tar.gz
    tar xvf linux-5.1.10.tar.gz
fi
if [ ! -e ${OUTDIR}/linux-5.1.10/arch/${ARCH}/boot/Image ]; then
    cd linux-5.1.10
    echo "Checking out version ${KERNEL_VERSION}"
    #git checkout ${KERNEL_VERSION}

    # TODO: Add your kernel build steps here
    # Generated .config file (dont use menuconfig which requires user input)
    # make menuconfig
    # Dont forget to add the Xcompiler path to the PATH env variable and install the bc package
    # bc is a language that supports arbitrary precision numbers with interactive execution of statements.
    export PATH=$PATH:${XCOMPILER_PATH}/bin/
    make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} mrproper # Clean make autogenerated files
    make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} defconfig # configure for virt target
    make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} all # generates image under arch/${ARCH}/boot/
    make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} modules # Build modules
    # make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} dtbs # build device tree
fi

# Download XCompiler if not already available
if [ ! -d $XCOMPILER_PATH ]; then
    echo "========== Download XCompiler =========="
    cd ${OUTDIR}
    wget "https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz"
    tar xvf gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz
else
    echo "========== XCompiler already available =========="
fi

# required by start-qemu-terminal.sh to start qemu using the kernel
echo "========== Adding the Image in outdir =========="
cp ${OUTDIR}/linux-5.1.10/arch/${ARCH}/boot/Image ${OUTDIR}

echo "Creating the staging directory for the root filesystem"
cd "$OUTDIR"

echo "========== Create rootfs directory =========="
# If directory exists, remove it
if [ -d "${OUTDIR}/rootfs" ]
then
	echo "Deleting rootfs directory at ${OUTDIR}/rootfs and starting over"
    sudo rm -rf ${OUTDIR}/rootfs
fi
# TODO: Create necessary base directories
mkdir ${OUTDIR}/rootfs && cd ${OUTDIR}/rootfs
mkdir -p bin dev etc home lib lib64 proc sbin sys tmp usr var
mkdir -p usr/bin usr/lib usr/sbin
mkdir -p var/log

cd "$OUTDIR"
echo "========== Get busybox repo =========="
if [ ! -d "${OUTDIR}/busybox" ];
then
    # Using github mirror, because https://git.busybox.net/busybox.git not responding
    git clone https://github.com/mirror/busybox.git
    cd busybox
    git checkout ${BUSYBOX_VERSION}
    # TODO:  Configure busybox
else
    cd ${OUTDIR}/busybox
fi

# TODO: Make and install busybox, in order to populate the rootfs directory
echo "========== Make and install busybox =========="
export PATH=$PATH:${XCOMPILER_PATH}/bin/
make distclean
make defconfig
make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE}
make CONFIG_PREFIX=${OUTDIR}/rootfs ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} install

echo "========== Library dependencies =========="
# Here, we move to the rootfs directory
cd ${OUTDIR}/rootfs
${CROSS_COMPILE}readelf -a bin/busybox | grep "program interpreter"
${CROSS_COMPILE}readelf -a bin/busybox | grep "Shared library"

# TODO: Add library dependencies to rootfs
echo "========== Add library dependencies to rootfs =========="
# On my local docker, this file is requested, but not in the runner?
if [ -e ${XCOMPILER_PATH}/aarch64-none-linux-gnu/libc/lib/ld-linux-aarch64.so.1 ]; then
    cp ${XCOMPILER_PATH}/aarch64-none-linux-gnu/libc/lib/ld-linux-aarch64.so.1 ${OUTDIR}/rootfs/lib
fi
cp ${XCOMPILER_PATH}/aarch64-none-linux-gnu/libc/lib64/libm.so.6 ${OUTDIR}/rootfs/lib64
cp ${XCOMPILER_PATH}/aarch64-none-linux-gnu/libc/lib64/libresolv.so.2 ${OUTDIR}/rootfs/lib64
cp ${XCOMPILER_PATH}/aarch64-none-linux-gnu/libc/lib64/libc.so.6 ${OUTDIR}/rootfs/lib64

# TODO: Make device nodes
# c means character device type
echo "========== Make device nodes =========="
rm -rf ${OUTDIR}/rootfs/dev/null
sudo mknod -m 666 dev/null c 1 3
rm -rf ${OUTDIR}/rootfs/dev/console
sudo mknod -m 666 dev/console c 5 1


# TODO: Clean and build the writer utility
echo "========== Clean and build the writer utility =========="
cd "$OUTDIR"
if [ ! -d "${REPO}" ];
then
    git clone https://github.com/cu-ecen-aeld/assignments-3-and-later-sebaleme.git
fi
cd ${REPO}/finder-app
make clean
make

# TODO: Copy the finder related scripts and executables to the /home directory
# on the target rootfs
echo "========== Copy the finder on the target rootfs =========="
cp -rf ${REPO}/finder-app/. ${OUTDIR}/rootfs/home/
# Fix to solve the conf simlink
rm ${OUTDIR}/rootfs/home/conf && mkdir ${OUTDIR}/rootfs/home/conf
cp -r ${REPO}/conf/. ${OUTDIR}/rootfs/home/conf/

# TODO: Chown the root directory
# On the target, only the root user is known
echo "========== Chown the root directory =========="
sudo chown root:root ${OUTDIR}/rootfs

# TODO: Create initramfs.cpio.gz
echo "========== Create initramfs.cpio.gz =========="
sudo apt-get install cpio
cd "${OUTDIR}/rootfs"
find . | cpio -H newc -ov --owner root:root > ${OUTDIR}/initramfs.cpio
gzip -f ${OUTDIR}/initramfs.cpio

# How to test:
# cd ${OUTDIR}
# ./assignments-3-and-later-sebaleme/finder-app/start-qemu-terminal.sh ${OUTDIR}

# Currently getting error
# /home # ./start-qemu-app.sh
# /bin/sh: ./start-qemu-app.sh: not found
# This works however:
# /home # sh start-qemu-app.sh
